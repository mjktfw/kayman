#! /bin/bash
# https://github.com/shakibamoshiri/bash-CLI-template

################################################################################
# bash strict mode
################################################################################

set -T # inherit DEBUG and RETURN trap for functions
set -C # prevent file overwrite by > &> <>
set -E # inherit -e
set -e # exit immediately on errors
set -u # exit on not assigned variables
set -o pipefail # exit on pipe failure

################################################################################
# environment
################################################################################
# APP_DIR="${KMN_DIR}"
# APP_DIR="${APP_DIR}" . "${APP_DIR}/app/env"

################################################################################
# global variable
################################################################################
function err_empty_val () {
  echo >&2 "$1: a value is needed for '$2'"
  exit 1
}

function err_unknown_opt () {
  echo >&2 "$1: Unknown option: '$2'"
  exit 1
}

function err_missing_args() {
  echo >&2 "$1: Missing arguments"
  exit 1
}

function err_unknown_cmd () {
  echo >&2 "$1: Unknown command: '$2'"
  exit 1
}

################################################################################
# functions
################################################################################

function __add() (
#-----------------------------------------------------------------------------
  # arguments
  fname="${FUNCNAME[0]}"
  function parse_opts() {

    while [ ${#} -gt 0 ]; do
      case "$1" in
        -- ) break ;;
        -k | --key-name ) opts[KEY_NAME]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -d | --dir ) opts[PUBKEY_DIR]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -* ) echo >&2 "$0: Invalid option: $1." ; exit 1 ;;
        * )  break ;;
      esac
    done

    args=("$@")
  }

  declare args
  declare -A opts
  parse_opts $@

#-----------------------------------------------------------------------------
  # body

  local pubkey_path="${HOME}/.ssh/${opts[KEY_NAME]}.pub"

  # TODO: assure it's public, not private
  cp "${pubkey_path}" "${opts[PUBKEY_DIR]}/pub/"

  (cd "${opts[PUBKEY_DIR]}" &&
      git add --all . &&
      git commit -m "${opts[KEY_NAME]}";
      git push)

  exit 0;
)

function __keygen() (

#-----------------------------------------------------------------------------
  # arguments
  fname="${FUNCNAME[0]}"
  function parse_opts() {

    while [ ${#} -gt 0 ]; do
      case "$1" in
        -- ) break ;;
        -k | --key-name ) opts[KEY_NAME]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -t | --key-type ) opts[KEY_TYPE]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -d | --make-default ) opts[d]="1" ; shift ;;
        -* ) echo >&2 "$0: Invalid option: $1." ; exit 1 ;;
        * )  break ;;
      esac
    done

    args=("$@")
  }

  declare args
  declare -A opts
  parse_opts $@

#-----------------------------------------------------------------------------
  # body

  local key_priv_path="${HOME}/.ssh/${opts[KEY_NAME]}"
  local key_id_path="${HOME}/.ssh/id_${opts[KEY_TYPE]}"

  # automatically creates dir, if non-existing
  ssh-keygen -q -t "${opts[KEY_TYPE]}" \
    -C "${opts[KEY_NAME]}" \
    -f "${key_priv_path}"

  if (( ${opts[d]} == 1 )); then
    ln -sf "${key_priv_path}" "${key_id_path}"
    ln -sf "${key_priv_path}.pub" "${key_id_path}.pub"
  fi
  # TODO: better create key in the working directory and add another command to make it default

  exit 0;
)

function __copy() (

#-----------------------------------------------------------------------------
  # arguments
  fname="${FUNCNAME[0]}"
  function parse_opts() {

    while [ ${#} -gt 0 ]; do
      case "$1" in
        -- ) break ;;
        -k | --key-name ) opts[KEY_NAME]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -r | --pubkey-repo ) opts[PUBKEY_REPO]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -u | --pubkey-user ) opts[PUBKEY_USER]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -* ) echo >&2 "$0: Invalid option: $1." ; exit 1 ;;
        * )  break ;;
      esac
    done

    args=("$@")
  }

  declare args
  declare -A opts
  parse_opts $@

#-----------------------------------------------------------------------------
  # body
  local gh_baseurl="https://raw.githubusercontent.com/${opts[PUBKEY_USERNAME]}/${PUBKEY_REPO}/master"
  local gh_key_url="${gh_baseurl}/pub/${opts[KEY_NAME]}.pub"

  curl "${gh_key_url}" >> "${HOME}/.ssh/authorized_keys"

  exit 0;
)

function __git_config() (

#-----------------------------------------------------------------------------
  # arguments
  fname="${FUNCNAME[0]}"
  function parse_opts() {

    while [ ${#} -gt 0 ]; do
      case "$1" in
        -- ) break ;;
        -u | --git-username ) opts[GIT_USERNAME]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -e | --git-email ) opts[GIT_EMAIL]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -* ) echo >&2 "$0: Invalid option: $1." ; exit 1 ;;
        * )  break ;;
      esac
    done

    args=("$@")
  }

  declare args
  declare -A opts
  parse_opts $@

#-----------------------------------------------------------------------------
  # body
  # TODO: for windows '"C:/Program Files/OpenSSH/ssh.exe"'
  # TODO: or better for windows: where.exe ssh.exe
  # TODO: must be quoted due to spaces!
  # TODO: SSH_CMD=$(where.exe ssh.exe)
  # TODO: git config core.sshCommand "\"$CMD\""

  git config --global user.email "${opts[GIT_EMAIL]}"
  git config --global user.name "${opts[GIT_USERNAME]}"

  exit 0;
)

function __github() (

#-----------------------------------------------------------------------------
  # arguments

  fname="${FUNCNAME[0]}"
  function parse_opts() {

    while [ ${#} -gt 0 ]; do
      case "$1" in
        -- ) break ;;
        # -c | --center ) opts[c]="$2" ; shift 2 ;;
        # -V | --version ) version ; exit 0 ;;
        -* ) echo >&2 "$0: Invalid option: $1." ; exit 1 ;;
        * )  break ;;
      esac
    done

    args=("$@")
  }

  declare args
  declare -A opts
  parse_opts $@

#-----------------------------------------------------------------------------
  # body

#-----------------------------------------------------------------------------
  # caller

  [[ "${#args[@]}" == 0 ]] &&
    err_missing_args $0

  local cmd="${args[0]}"
  local call_args="${args[@]:1}"

  case "${cmd}" in
    auth ) __github_auth "${call_args}" ;;
    ssh ) __github_ssh "${call_args}" ;;
    * )
      echo >&2 "$0: Unknown command: $1";
      # main_help 1;
      exit 1;
    ;;
  esac
)

function __github_auth() (

#-----------------------------------------------------------------------------
  # arguments
  fname="${FUNCNAME[0]}"
  function parse_opts() {

    while [ ${#} -gt 0 ]; do
      case "$1" in
        -- ) break ;;
        -s | --gh-scopes ) opts[GH_SCOPES]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -* ) echo >&2 "$0: Invalid option: $1." ; exit 1 ;;
        * )  break ;;
      esac
    done

    args=("$@")
  }

  declare args
  declare -A opts
  parse_opts $@

#-----------------------------------------------------------------------------
  # body
  # github.com/login/device
  # --git-protocol does not change how you login, it changes how subsequent git operations are handled
  # after signig with --web option, it still automatically creates and downloads the token
  echo "Open URL: github.com/login/device"
  gh auth status ||
      gh auth login --hostname github.com \
      --git-protocol https \
      --web \
      --scopes "${opts[GH_SCOPES]}"

  gh config set --host github.com prompt disabled

  exit 0;
)

function __github_ssh() (

#-----------------------------------------------------------------------------
  # arguments
  fname="${FUNCNAME[0]}"
  function parse_opts() {

    while [ ${#} -gt 0 ]; do
      case "$1" in
        -- ) break ;;
        -k | --key-name ) opts[KEY_NAME]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -* ) echo >&2 "$0: Invalid option: $1." ; exit 1 ;;
        * )  break ;;
      esac
    done

    args=("$@")
  }

  declare args
  declare -A opts
  parse_opts $@

#-----------------------------------------------------------------------------
  # body
  pubkey_path="${HOME}/.ssh/${opts[KEY_NAME]}.pub"

  gh ssh-key add "${pubkey_path}" --type authentication
  gh config set --host github.com git_protocol ssh

  exit 0
)

function __setup_mkays() (

#-----------------------------------------------------------------------------
  # arguments
  fname="${FUNCNAME[0]}"
  function parse_opts() {

    while [ ${#} -gt 0 ]; do
      case "$1" in
        -- ) break ;;
        -u | --pubkey-username ) opts[PUBKEY_USERNAME]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -r | --pubkey-repo ) opts[PUBKEY_REPO]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -d | --pubkey-dir ) opts[PUBKEY_DIR]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        -* ) echo >&2 "$0: Invalid option: $1." ; exit 1 ;;
        * )  break ;;
      esac
    done

    args=("$@")
  }

  declare args
  declare -A opts
  parse_opts $@

#-----------------------------------------------------------------------------
  # body
  repo_ssl="https://github.com/${opts[PUBKEY_USERNAME]}/${opts[PUBKEY_REPO]}.git"
  repo_ssh="git@github.com:${opts[PUBKEY_USERNAME]}/${opts[PUBKEY_REPO]}.git"

  [ ! -d "${opts[PUBKEY_DIR]}/.git" ] &&
    git clone "${repo_ssl}" "${opts[PUBKEY_DIR]}"

  (cd "${opts[PUBKEY_DIR]}" &&
    git pull)

  (cd "${opts[PUBKEY_DIR]}" &&
    git remote set-url --push origin "${repo_ssh}")

  exit 0
)

function main() (

#-----------------------------------------------------------------------------
  # arguments

  fname="${FUNCNAME[0]}"
  function parse_opts() {

    while [ ${#} -gt 0 ]; do
      case "$1" in
        -- ) break ;;
        -t | --test ) opts[t]="${2:?$(err_empty_val "${fname}" $1)}" ; shift 2 ;;
        # -V | --version ) version ; exit 0 ;;
        -* ) err_unknown_opt "${fname}""$1" ;;
        * )  break ;;
      esac
    done

    args=("$@")
  }

  declare args
  declare -A opts
  parse_opts $@

#-----------------------------------------------------------------------------
  # body

#-----------------------------------------------------------------------------
  # caller

  [[ "${#args[@]}" == 0 ]] &&
    err_missing_args "${FUNCNAME[0]}"

  local cmd="${args[0]}"
  local call_args="${args[@]:1}"

  case "${cmd}" in
    keygen ) __keygen "${call_args}" ;;
    add ) __add "${call_args}" ;;
    copy ) __copy "${call_args}" ;;
    git-config ) __git_config "${call_args}" ;;
    github ) __github "${call_args}" ;;
    setup-mkays ) __setup_mkays "${call_args}" ;;
    * ) err_unknown_cmd "${FUNCNAME[0]}" "${cmd}" ;;
  esac
)

main "$@"
