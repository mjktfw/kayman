#!/bin/bash
# https://github.com/shakibamoshiri/bash-CLI-template

################################################################################
# bash strict mode
################################################################################

set -T # inherit DEBUG and RETURN trap for functions
set -C # prevent file overwrite by > &> <>
set -E # inherit -e
set -e # exit immediately on errors
set -u # exit on not assigned variables
set -o pipefail # exit on pipe failure

shopt -s extglob

################################################################################
# environment
################################################################################
APP_DIR="${KMN_DIR}"
ENV_LOAD=true

################################################################################
# helper functions
################################################################################

function env::load () {
  if [[ "${ENV_LOAD}" == true ]]; then
    APP_DIR="${APP_DIR}" . "${APP_DIR}/app/env"
  fi
}

function err::empty_val () {
  echo >&2 "$1: a value is needed for '$2'"
  exit 1
}

function err::empty_val2 () {
  err::empty_val "${FUNCNAME[3]}" "$1"
}

function err::opt_raw () {
  echo >&2 "$1: Unknown option: '$2'"
  exit 1
}

function err::opt () {
  err::opt_raw "${FUNCNAME[2]}" "${ARGS[0]}"
}

function err::cmd_null_raw() {
  echo >&2 "$1: Missing command"
  exit 1
}

function err::cmd_null() {
  if [[ "${#ARGS[@]}" == 0 ]] ; then
    err::cmd_null_raw "${FUNCNAME[2]}"
  fi
}

function err::cmd_undef_raw () {
  echo >&2 "$1: Undefined command: '$2'"
  exit 1
}

function err::cmd_undef () {
  err::cmd_undef_raw "${FUNCNAME[2]}" "$1"
}

function opt::set () {
  declare opt_name="$1"
  declare opt_string="${ARGS[0]}"

  OPTS[$opt_name]="1"
  ARGS=("${ARGS[@]:1}")
}

function opt::set2 () {
  declare opt_name="$1"
  declare opt_string="${ARGS[0]}"
  declare opt_val="${ARGS[1]:?$(err::empty_val2 $opt_string)}"

  OPTS["${opt_name}"]="${opt_val}"
  ARGS=("${ARGS[@]:2}")
}

function opt::get_from_env () {
  declare optnames=($X_OPTS)

  if [[ ${#optnames[@]} -gt 0 ]] ; then
    for optname in ${optnames[@]} ; do
      : "${OPTS["${optname}"]:="${!optname:-""}"}"
    done
  fi

}

function opt::call_cmd() {

  if [[ "${#X_CMDS}" == 0 ]] ; then
    #TODO: return error if any subcommand is supplied
    return 0
  fi

  err::cmd_null

  if [[ "${FUNCNAME[1]}" == "main" ]] ; then
    declare call_fun="${ARGS[0]}"
  else
    declare call_fun="${FUNCNAME[1]}_${ARGS[0]}"
  fi

  declare cmds="$(echo $X_CMDS | tr -s [:blank:] '|')"
  declare cmds="@(${cmds})"

  case "${ARGS[0]}" in
    $cmds ) "${call_fun}" "${ARGS[@]:1}" ;;
    * ) err::cmd_undef "${ARGS[0]}" ;;
  esac
}

function util::get_key_type() {
  declare key_path="$1"
  declare key_pub="$(ssh-keygen -f "${key_path}" -y)"
  declare key_type="$(echo "${key_pub}" | cut -d' ' -f1 | sed -e "s/^ssh-//")"

  echo "${key_type}"
}

function util::get_key_comment() {
  declare key_path="$1"
  declare key_pub="$(ssh-keygen -f "${key_path}" -y)"
  declare key_comment="$(echo "${key_pub}" | cut -d' ' -f3)"

  echo "${key_comment}"
}

function util::is_git_repo() {
  dir="$1"
  (
    cd "${dir}" &&
      echo $PWD &&
      echo "$(git rev-parse --is-inside-work-tree 2> /dev/null)"
  )

}

################################################################################
# functions
################################################################################

function key() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS="gen default add"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS=""
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in
        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function key_gen() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="KEY_FILE KEY_NAME KEY_TYPE KEY_DIR KEY_MAKE_DEFAULT"
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -f | --key-file ) opt::set2 KEY_FILE ;;
        -k | --key-name ) opt::set2 KEY_NAME ;;
        -t | --key-type ) opt::set2 KEY_TYPE ;;
        -d | --key-dir ) opt::set2 KEY_DIR ;;
        --make-default ) opt::set KEY_MAKE_DEFAULT ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }


  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body

  declare key_path="${OPTS[KEY_FILE]:-${OPTS[KEY_DIR]}/${OPTS[KEY_NAME]}}"
  declare key_comment="$(basename "${key_path}")"

  # automatically creates dir, if non-existing
  ssh-keygen -q \
    -t "${OPTS[KEY_TYPE]}" \
    -C "${key_comment}" \
    -f "${key_path}"

  if (( "${OPTS[KEY_MAKE_DEFAULT]:-0}" == 1 )); then
    key default -f "${key_path}"
  fi

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function key_default() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="KEY_FILE KEY_NAME KEY_DIR"
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -f | --key-file ) opt::set2 KEY_FILE ;;
        -k | --key-name ) opt::set2 KEY_NAME ;;
        -d | --key-dir ) opt::set2 KEY_DIR ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }


  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body

  declare key_path="${OPTS[KEY_FILE]:-${OPTS[KEY_DIR]}/${OPTS[KEY_NAME]}}"
  declare key_type="$(util::get_key_type "${key_path}")"
  declare key_id_path="$(dirname "${key_path}")/id_${key_type}"

  ln -sf "${key_path}" "${key_id_path}"
  ln -sf "${key_path}.pub" "${key_id_path}.pub"

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function key_add() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="KEY_FILE KEY_NAME KEY_DIR PUBKEY_REPO_DIR"

  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -f | --key-file ) opt::set2 KEY_FILE ;;
        -k | --key-name ) opt::set2 KEY_NAME ;;
        -d | --key-dir ) opt::set2 KEY_DIR ;;
        -r | --repo-dir ) opt::set2 PUBKEY_REPO_DIR ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body
  declare key_path="${OPTS[KEY_FILE]:-${OPTS[KEY_DIR]}/${OPTS[KEY_NAME]}}"
  declare pubkey_path="${keypath}.pub"

  # TODO: assure it's public, not private
  cp "${pubkey_path}" "${OPTS[PUBKEY_REPO_DIR]}/pub/"

  # TODO: use comment instead of filename
  repo sync \
    -d "${PUBKEY_REPO_DIR}" \
    -m "$(basename ${key_path})"

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function copy() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="KEY_NAME PUBKEY_REPO PUBKEY_USER"
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -k | --key-name ) opt::set2 KEY_NAME ;;
        -r | --pubkey-repo ) opt::set2 PUBKEY_REPO ;;
        -u | --pubkey-user ) opt::set2 PUBKEY_USER ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body
  declare gh_baseurl="https://raw.githubusercontent.com/${OPTS[PUBKEY_USERNAME]}/${PUBKEY_REPO}/master"
  declare gh_key_url="${gh_baseurl}/pub/${OPTS[KEY_NAME]}.pub"

  curl "${gh_key_url}" >> "${HOME}/.ssh/authorized_keys"

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function repo() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS="setup sync"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS=""
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in
        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function repo_setup() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="PUBKEY_USERNAME PUBKEY_RPEO PUBKEY_REPO_DIR"
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -u | --pubkey-username ) opt::set2 PUBKEY_USERNAME;;
        -r | --pubkey-repo ) opt::set2 PUBKEY_REPO ;;
        -d | --pubkey-dir ) opt::set2 PUBKEY_REPO_DIR ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body
  repo_ssl="https://github.com/${OPTS[PUBKEY_USERNAME]}/${OPTS[PUBKEY_REPO]}.git"
  repo_ssh="git@github.com:${OPTS[PUBKEY_USERNAME]}/${OPTS[PUBKEY_REPO]}.git"

  [[ ! -d "${OPTS[PUBKEY_REPO_DIR]}/.git" ]] &&
    git clone "${repo_ssl}" "${OPTS[PUBKEY_REPO_DIR]}"

  (cd "${OPTS[PUBKEY_REPO_DIR]}" &&
    git pull)

  (cd "${OPTS[PUBKEY_REPO_DIR]}" &&
    git remote set-url --push origin "${repo_ssh}")

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function repo_sync() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="PUBKEY_REPO_DIR PUBKEY_REPO_MESSAGE"
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -r | --repo-dir ) opt::set2 PUBKEY_REPO_DIR ;;
        -m | --message ) opt::set2 PUBKEY_REPO_MESSAGE ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body
  (cd "${OPTS[PUBKEY_REPO_DIR]}" &&
    git add --all . &&
    git commit -m "${OPTS[PUBKEY_REPO_MESSAGE]}";
    git push)


  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function git() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS="config"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS=""
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in
        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function git_config() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="GIT_USERNAME GIT_EMAIL"
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -u | --git-username ) opt::set2 GIT_USERNAME ;;
        -e | --git-email ) opt::set2 GIT_EMAIL ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body

  # TODO: for windows '"C:/Program Files/OpenSSH/ssh.exe"'
  # TODO: or better for windows: where.exe ssh.exe
  # TODO: must be quoted due to spaces!
  # TODO: SSH_CMD=$(where.exe ssh.exe)
  # TODO: git config core.sshCommand "\"$CMD\""

  git config --global user.email "${OPTS[GIT_EMAIL]}"
  git config --global user.name "${OPTS[GIT_USERNAME]}"

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function github() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS="auth ssh"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS=""
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in
        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function github_auth() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="GH_SCOPES"
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -s | --gh-scopes ) opt::set2 GH_SCOPES ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body

  # github.com/login/device
  # --git-protocol does not change how you login, it changes how subsequent git operations are handled
  # after signig with --web option, it still automatically creates and downloads the token
  echo "Open URL: github.com/login/device"
  gh auth status ||
      gh auth login --hostname github.com \
      --git-protocol https \
      --web \
      --scopes "${OPTS[GH_SCOPES]}"

  gh config set --host github.com prompt disabled

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function github_ssh() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="KEY_NAME"
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -k | --key-name ) opt::set2 KEY_NAME ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body
  pubkey_path="${HOME}/.ssh/${OPTS[KEY_NAME]}.pub"

  gh ssh-key add "${pubkey_path}" --type authentication
  gh config set --host github.com git_protocol ssh

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function keygen() (
  key gen "$@"
)

function main() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS="example key keygen copy git github repo"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS=""
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in
        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

function example() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare -r X_CMDS=""

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented options
  declare -r X_OPTS="SINGLE DOUBLE XPECIAL"
  function opt::parse_args() {
    while [[ "${#ARGS[@]}" -gt 0 ]]; do case "${ARGS[0]}" in

        -s | --single ) opt::set SINGLE ;;
        -d | --double ) opt::set2 DOUBLE ;;
        -x | --xpecial ) echo "Special: xD" ; exit 0 ;;

        -- ) break ;; -* ) err::opt ;; * )  break ;;
      esac done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  opt::parse_args; opt::get_from_env

  #-----------------------------------------------------------------------------
  # (EDIT) body
  echo "OPTS[SINGLE]: ${OPTS[SINGLE]}"
  echo "OPTS[DOUBLE]: ${OPTS[DOUBLE]}"

  #-----------------------------------------------------------------------------
  # Call subcommand
  opt::call_cmd
)

################################################################################
# RUN
################################################################################

# env::load
# main "$@"

echo "PWD: $PWD"
if [ $(util::is_git_repo) ]; then
  echo ok
else
  echo not
fi
