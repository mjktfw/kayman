#! /bin/bash
# https://github.com/shakibamoshiri/bash-CLI-template

################################################################################
# bash strict mode
################################################################################

set -T # inherit DEBUG and RETURN trap for functions
set -C # prevent file overwrite by > &> <>
set -E # inherit -e
set -e # exit immediately on errors
set -u # exit on not assigned variables
set -o pipefail # exit on pipe failure

shopt -s extglob

################################################################################
# environment
################################################################################
# APP_DIR="${KMN_DIR}"
# APP_DIR="${APP_DIR}" . "${APP_DIR}/app/env"

################################################################################
# global variable
################################################################################
function _err_empty_val () {
  echo >&2 "$1: a value is needed for '$2'"
  exit 1
}

function _err_empty_val2 () {
  _err_empty_val "${FUNCNAME[3]}" "$1"
}

function _err_no_default_raw () {
  echo >&2 "$1: no default (and arg unspecified) for '$2'"
  exit 1
}

function _err_no_default () {
  _err_no_default_raw "${FUNCNAME[2]}" "$1"
}

function _err_opt_raw () {
  echo >&2 "$1: Unknown option: '$2'"
  exit 1
}

function _err_opt () {
  _err_opt_raw "${FUNCNAME[2]}" "${ARGS[0]}"
}

function _err_cmd_null_raw() {
  echo >&2 "$1: Missing command"
  exit 1
}

function _err_cmd_null() {
  if [[ "${#ARGS[@]}" == 0 ]] ; then
    _err_cmd_null_raw "${FUNCNAME[2]}"
  fi
}

function _err_cmd_undef_raw () {
  echo >&2 "$1: Undefined command: '$2'"
  exit 1
}

function _err_cmd_undef () {
  _err_cmd_undef_raw "${FUNCNAME[2]}" "$1"
}

function _set_opt () {
  local opt_name=$1
  local opt_string="${ARGS[0]}"

  OPTS[$opt_name]="1"
  ARGS=("${ARGS[@]:1}")
}

function _set_opt2 () {
  local opt_name=$1
  local opt_string="${ARGS[0]}"
  local opt_val="${ARGS[1]:?$(_err_empty_val2 $opt_string)}"

  OPTS[$opt_name]="${opt_val}"
  ARGS=("${ARGS[@]:2}")
}

function _default_opts () {
  declare optnms=($OPTNAMES)
  [ ${#optnms[@]} == 0 ] && return 0
  for optnm in ${optnms[@]} ; do
    : ${OPTS[$optnm]:=${!optnm:?$(_err_no_default $optnm)}}
  done
  # printarr OPTS
}

function _call_cmd() {
  _err_cmd_null

  if [[ "${FUNCNAME[1]}" == "main" ]] ; then
    declare call_fun="__${ARGS[0]}"
  else
    declare call_fun="${FUNCNAME[1]}_${ARGS[0]}"
  fi

  declare cmds="@(${CMDS})"
  case "${ARGS[0]}" in
    $cmds ) "$call_fun" "${ARGS[@]:1}" ;;
    * ) _err_cmd_undef "${ARGS[0]}" ;;
  esac
}

function printarr() {
  declare -n __p="$1"
  for k in "${!__p[@]}"; do
    printf "%s=%s\n" "$k" "${__p[$k]}"
  done
}

################################################################################
# functions
################################################################################

function __add() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES="KEY_NAME PUBKEY_DIR"
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -k | --key-name ) _set_opt2 KEY_NAME ;;
        -d | --pubkey-dir ) _set_opt2 PUBKEY_DIR ;;
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body
  local pubkey_path="${HOME}/.ssh/${OPTS[KEY_NAME]}.pub"

  # TODO: assure it's public, not private
  cp "${pubkey_path}" "${OPTS[PUBKEY_DIR]}/pub/"

  (cd "${OPTS[PUBKEY_DIR]}" &&
    git add --all . &&
    git commit -m "${OPTS[KEY_NAME]}";
    git push)

  exit 0;
)

function __keygen() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES="KEY_NAME KEY_TYPE KEY_DIR KEY_DEFAULT"
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -k | --key-name ) _set_opt2 KEY_NAME ;;
        -t | --key-type ) _set_opt2 KEY_TYPE ;;
        -d | --key-dir ) _set_opt2 KEY_DIR ;;
        -D | --key-default ) _set_opt KEY_DEFAULT ;;
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body
  local key_priv_path="${OPTS[KEY_DIR]}/${OPTS[KEY_NAME]}"
  local key_id_path="${OPTS[KEY_DIR]}/id_${OPTS[KEY_TYPE]}"

  # automatically creates dir, if non-existing
  ssh-keygen -q \
    -t "${OPTS[KEY_TYPE]}" \
    -C "${OPTS[KEY_NAME]}" \
    -f "${key_priv_path}"

  if (( ${OPTS[D]} == 1 )); then
    ln -sf "${key_priv_path}" "${key_id_path}"
    ln -sf "${key_priv_path}.pub" "${key_id_path}.pub"
  fi
  # TODO: better create key in the working directory and add another command to make it default

  exit 0;
)

function __copy() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES="KEY_NAME PUBKEY_REPO PUBKEY_USER"
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -k | --key-name ) _set_opt2 KEY_NAME ;;
        -r | --pubkey-repo ) _set_opt2 PUBKEY_REPO ;;
        -u | --pubkey-user ) _set_opt2 PUBKEY_USER ;;
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body
  local gh_baseurl="https://raw.githubusercontent.com/${OPTS[PUBKEY_USERNAME]}/${PUBKEY_REPO}/master"
  local gh_key_url="${gh_baseurl}/pub/${OPTS[KEY_NAME]}.pub"

  curl "${gh_key_url}" >> "${HOME}/.ssh/authorized_keys"

  exit 0;
)

function __git() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare CMDS="config"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES=""
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # Call subcommand
  _call_cmd
)

function __git_config() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES="GIT_USERNAME GIT_EMAIL"
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -u | --git-username ) _set_opt2 GIT_USERNAME ;;
        -e | --git-email ) _set_opt2 GIT_EMAIL ;;
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body

  # TODO: for windows '"C:/Program Files/OpenSSH/ssh.exe"'
  # TODO: or better for windows: where.exe ssh.exe
  # TODO: must be quoted due to spaces!
  # TODO: SSH_CMD=$(where.exe ssh.exe)
  # TODO: git config core.sshCommand "\"$CMD\""

  git config --global user.email "${OPTS[GIT_EMAIL]}"
  git config --global user.name "${OPTS[GIT_USERNAME]}"

  exit 0;
)

function __github() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare CMDS="auth|ssh"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES=""
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body

  #-----------------------------------------------------------------------------
  # Call subcommand
  _call_cmd
)

function __github_auth() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES="GH_SCOPES"
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -s | --gh-scopes ) _set_opt2 GH_SCOPES ;;
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body

  # github.com/login/device
  # --git-protocol does not change how you login, it changes how subsequent git operations are handled
  # after signig with --web option, it still automatically creates and downloads the token
  echo "Open URL: github.com/login/device"
  gh auth status ||
      gh auth login --hostname github.com \
      --git-protocol https \
      --web \
      --scopes "${OPTS[GH_SCOPES]}"

  gh config set --host github.com prompt disabled

  exit 0;
)

function __github_ssh() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES="KEY_NAME"
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -k | --key-name ) _set_opt2 KEY_NAME ;;
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body
  pubkey_path="${HOME}/.ssh/${OPTS[KEY_NAME]}.pub"

  gh ssh-key add "${pubkey_path}" --type authentication
  gh config set --host github.com git_protocol ssh

  exit 0
)

function __mkays() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare CMDS="setup"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES=""
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body

  #-----------------------------------------------------------------------------
  # Call subcommand
  _call_cmd
)

function __mkays_setup() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES="PUBKEY_USERNAME PUBKEY_RPEO PUBKEY_DIR"
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -u | --pubkey-username ) _set_opt2 PUBKEY_USERNAME;;
        -r | --pubkey-repo ) _set_opt2 PUBKEY_REPO ;;
        -d | --pubkey-dir ) _set_opt2 PUBKEY_DIR ;;
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body
  repo_ssl="https://github.com/${OPTS[PUBKEY_USERNAME]}/${OPTS[PUBKEY_REPO]}.git"
  repo_ssh="git@github.com:${OPTS[PUBKEY_USERNAME]}/${OPTS[PUBKEY_REPO]}.git"

  [ ! -d "${OPTS[PUBKEY_DIR]}/.git" ] &&
    git clone "${repo_ssl}" "${OPTS[PUBKEY_DIR]}"

  (cd "${OPTS[PUBKEY_DIR]}" &&
    git pull)

  (cd "${OPTS[PUBKEY_DIR]}" &&
    git remote set-url --push origin "${repo_ssh}")

  exit 0
)

function main() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare CMDS="keygen|add|copy|git|github|mkays"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES=""
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # Call subcommand
  _call_cmd
)

function sample() (

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented subcommands
  declare CMDS="add|del|sum"

  #-----------------------------------------------------------------------------
  # (EDIT) Implemented arguments
  declare OPTNAMES="SINGLE DOUBLE"
  function parse_opts() {
    while [ "${#ARGS[@]}" -gt 0 ]; do
      case "${ARGS[0]}" in
        -s | --single ) _set_opt SINGLE ;;
        -d | --double ) _set_opt2 DOUBLE ;;
        -V | --version ) echo "Version: xD" ; exit 0 ;;
        -- ) break ;;
        -* ) _err_opt ;;
        * )  break ;;
      esac
    done
  }

  #-----------------------------------------------------------------------------
  # Parse arguments
  declare ARGS=("$@")
  declare -A OPTS
  parse_opts; _default_opts

  #-----------------------------------------------------------------------------
  # (EDIT) body

  if [[ 1 == 0 ]] ; then
    exit 1
  fi

  #-----------------------------------------------------------------------------
  # Call subcommand
  _call_cmd
)

main "$@"
